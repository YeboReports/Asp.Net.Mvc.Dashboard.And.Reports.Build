@using System.Drawing
@using System.Web.UI.WebControls
@using BusinessLogic.Logic;
@using CommonDLL.Helper
@{

    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "UserPasswordGridView";

        settings.CallbackRouteValues = new { Controller = "User", Action = "UserPasswordGridViewPartial" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "User", Action = "UserPasswordUpdate" };

        settings.Styles.SearchPanel.CssClass = "search-panel-right";

        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.Modal = true;
        settings.SettingsPopup.EditForm.Width = System.Web.UI.WebControls.Unit.Pixel(500);
        settings.SettingsBehavior.ConfirmDelete = true;
        settings.SettingsText.PopupEditFormCaption = "";
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.SettingsEditing.EditFormColumnCount = 1;
        settings.Height = System.Web.UI.WebControls.Unit.Percentage(30);
        settings.Styles.Header.CssClass = "grid-header";

        settings.SettingsSearchPanel.Visible = false;;
        settings.Styles.SearchPanel.CssClass = "search-panel-right";

        settings.KeyFieldName = "Id";

        settings.SettingsCommandButton.NewButton.Image.IconID = "actions_add_16x16office2013";
        settings.SettingsCommandButton.NewButton.RenderMode = GridCommandButtonRenderMode.Image;
        settings.SettingsCommandButton.EditButton.Image.IconID = "actions_edit_16x16devav";
        settings.SettingsCommandButton.EditButton.RenderMode = GridCommandButtonRenderMode.Image;
        settings.SettingsCommandButton.DeleteButton.Image.IconID = "actions_cancel_16x16office2013";
        settings.SettingsCommandButton.DeleteButton.RenderMode = GridCommandButtonRenderMode.Image;


        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.Width = System.Web.UI.WebControls.Unit.Percentage(2);


        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowGroupPanel = false;

        settings.Styles.CommandColumn.Spacing = new Unit(15);
        settings.Styles.AlternatingRow.Enabled = DefaultBoolean.True;


        settings.KeyFieldName = "Id";

        settings.SettingsPager.Visible = false;
        settings.SettingsPager.Position = PagerPosition.Bottom;
        settings.SettingsPager.FirstPageButton.Visible = false;
        settings.SettingsPager.LastPageButton.Visible = false;
        settings.SettingsPager.PageSizeItemSettings.Visible = false;
        settings.SettingsPager.PageSizeItemSettings.Items = new[] { "5", "10", "20", "50", "100" };
        settings.SettingsPager.PageSizeItemSettings.ShowAllItem = true;
        settings.SettingsPager.PageSize = 100;

        settings.Styles.CommandColumn.Spacing = new Unit(15);
        settings.Styles.AlternatingRow.Enabled = DefaultBoolean.True;

        settings.CommandButtonInitialize = (sender, e) =>
        {
            var grd = sender as MVCxGridView;
            if (e.ButtonType == ColumnCommandButtonType.Delete)
            {
                var isLocked = grd.GetRowValues(e.VisibleIndex, "IsLocked");
                if ((bool)isLocked)
                {
                    e.Visible = false;
                }
            }
            else if (e.ButtonType == ColumnCommandButtonType.Edit)
            {
                var isLocked = grd.GetRowValues(e.VisibleIndex, "IsLocked");
                if ((bool)isLocked)
                {
                    e.Visible = false;
                }

            }
        };

        settings.Columns.Add(column =>
        {
            column.FieldName = "UserCaption";
            column.HeaderStyle.ForeColor = Color.Black;
            column.Caption = "UserCaption";
            column.Visible = true;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.SetColVisibleIndex(2);
            column.ReadOnly = true;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "Email";
            column.HeaderStyle.ForeColor = Color.Black;
            column.Caption = "Email";
            column.Visible = true;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.SetColVisibleIndex(3);
            column.ReadOnly = true;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "LastPasswordModifiedByDateTime";
            column.HeaderStyle.ForeColor = Color.Black;
            column.PropertiesEdit.DisplayFormatString = "dd MMM yyyy HH:mm:ss";
            column.Caption = "Password Latest Update";
            column.Visible = true;
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.False;
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.SetColVisibleIndex(4);
            column.PropertiesEdit.DisplayFormatString = "dd MMM yyyy HH:mm:ss";
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "LastPasswordModifiedByUserId";
            column.Caption = "Last Updated By User";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Visible = true;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.EditFormSettings.Visible = DefaultBoolean.False;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = new UserLogic().GetAll();
            comboBoxProperties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
            comboBoxProperties.TextField = "UserCaption";
            comboBoxProperties.ValueField = "Id";
            comboBoxProperties.ValueType = typeof(int);
            column.SetColVisibleIndex(5);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "NewPassword";
            column.HeaderStyle.ForeColor = Color.Black;
            column.Caption = "New User Password";
            column.Visible = false;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.SetColVisibleIndex(3);
            column.ReadOnly = false;
            var prop = (column.PropertiesEdit as TextBoxProperties);
            prop.Password = true;

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ConfirmPassword";
            column.HeaderStyle.ForeColor = Color.Black;
            column.Caption = "Confirm New User Password";
            column.Visible = false;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.SetColVisibleIndex(3);
            column.ReadOnly = false;
            var prop = (column.PropertiesEdit as TextBoxProperties);
            prop.Password = true;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "YourPassword";
            column.HeaderStyle.ForeColor = Color.Black;
            column.Caption = "Enter Your Password";
            column.Visible = false;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.SetColVisibleIndex(3);
            column.ReadOnly = false;
            var prop = (column.PropertiesEdit as TextBoxProperties);
            prop.Password = true;
        });

        settings.Columns.Add(column =>
        {
            column.Caption = "Locked";
            column.SetDataItemTemplateContent(c =>
            {

                var isLocked = (bool)DataBinder.Eval(c.DataItem, "IsLocked");

                Html.DevExpress().Image(reptImage =>
                {
                    reptImage.Name = "image_usp" + DataBinder.Eval(c.DataItem, "Id");
                    reptImage.ImageUrl = isLocked ? "~/Content/Images/Grid/Lock.png" : "~/Content/Images/Grid/open_lock.png";
                }).GetHtml();

            });
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.False;
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.SetColVisibleIndex(100);
        });


        if (ViewData["GridException"] != null)
        {
            settings.SetFooterRowTemplateContent(c =>
            {
                Html.ViewContext.Writer.Write(ViewData["GridException"]);
            });
        }

        settings.BeforeGetCallbackResult = (s, e) =>
        {

            if (ViewData["GridException"] != null)
            {
                MVCxGridView gridView = (MVCxGridView)s;
                gridView.Settings.ShowFooter = true;
            }
        };

        settings.PreRender = (sender, e) =>
        {
            if (ViewData["GridException"] != null)
            {
                MVCxGridView gridView = (MVCxGridView)sender;
                gridView.Settings.ShowFooter = true;
            }

        };


        settings.CommandColumn.ShowNewButtonInHeader = false;
        settings.CommandColumn.ShowDeleteButton = false;

    });


    if (ViewData["GridException"] != null)
    {
        grid.SetEditErrorText((string)ViewData["GridException"]);
    }
}
@grid.Bind(Model).GetHtml()
