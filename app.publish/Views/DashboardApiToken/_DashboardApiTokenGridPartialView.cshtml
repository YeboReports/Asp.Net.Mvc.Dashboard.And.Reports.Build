@using System.Drawing
@using BusinessLogic.Logic;
@using Reports.Controllers.Cache
@{

    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "DashboardApiTokenGridView";
        settings.SettingsSearchPanel.Visible = false;;
        settings.CallbackRouteValues = new { Controller = "DashboardApiToken", Action = "DashboardAPITokenGridPartialView" };
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "DashboardApiToken", Action = "DashboardAPITokenGridPartialViewAdd" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "DashboardApiToken", Action = "DashboardAPITokenGridPartialViewDelete" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "DashboardApiToken", Action = "DashboardAPITokenGridPartialViewUpdate" };

        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
        settings.SettingsPopup.EditForm.Modal = true;
        settings.SettingsPopup.EditForm.Width = Unit.Pixel(500);
        settings.SettingsBehavior.ConfirmDelete = true;
        settings.SettingsText.PopupEditFormCaption = "";
        settings.Width = Unit.Percentage(100);
        settings.SettingsEditing.EditFormColumnCount = 1;

        settings.Styles.Header.CssClass = "grid-header";
        //settings.Styles.Cell.Font.Size = 11;

        settings.SettingsCommandButton.NewButton.Image.IconID = "actions_add_16x16office2013";
        settings.SettingsCommandButton.NewButton.RenderMode = GridCommandButtonRenderMode.Image;
        settings.SettingsCommandButton.EditButton.Image.IconID = "actions_edit_16x16devav";
        settings.SettingsCommandButton.EditButton.RenderMode = GridCommandButtonRenderMode.Image;
        settings.SettingsCommandButton.DeleteButton.Image.IconID = "actions_cancel_16x16office2013";
        settings.SettingsCommandButton.DeleteButton.RenderMode = GridCommandButtonRenderMode.Image;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        // settings.CommandColumn.Width = Unit.Percentage(5);

        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowGroupPanel = false;;

        settings.KeyFieldName = "Id";
        //settings.SettingsBehavior.AllowEllipsisInText = false;
        settings.SettingsPager.Visible = true;
        settings.SettingsPager.Position = PagerPosition.Bottom;
        settings.SettingsPager.FirstPageButton.Visible = true;
        settings.SettingsPager.LastPageButton.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new[] { "5", "10", "15", "20", "50", "100", "200", "500" };
        settings.SettingsPager.PageSizeItemSettings.ShowAllItem = true;
        settings.SettingsPager.PageSize = 15;

        settings.Styles.CommandColumn.Spacing = new Unit(15);
        settings.Styles.AlternatingRow.Enabled = DefaultBoolean.True;
        settings.Styles.AlternatingRow.BackColor = Color.WhiteSmoke;
        settings.Styles.SelectedRow.BackColor = Color.Azure;

        settings.CommandButtonInitialize = (sender, e) =>
        {
            var grd = sender as MVCxGridView;
            if (e.ButtonType == ColumnCommandButtonType.Delete)
            {
                var isLocked = grd.GetRowValues(e.VisibleIndex, "IsLocked");
                if ((bool)isLocked)
                {
                    e.Visible = false;
                }
            }
            else if (e.ButtonType == ColumnCommandButtonType.Edit)
            {
                var isLocked = grd.GetRowValues(e.VisibleIndex, "IsLocked");
                if ((bool)isLocked)
                {
                    e.Visible = false;
                }

            }
        };

        settings.Columns.Add(column =>
        {
            column.FieldName = "";
            column.Caption = "Copy Url";
            column.Settings.AllowAutoFilter = DefaultBoolean.False;
            column.Settings.AllowHeaderFilter = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.False;
            column.CellStyle.Cursor = "default";

            column.SetDataItemTemplateContent(cell =>
            {

                Html.DevExpress().Button(button =>
                {
                    button.Name = "CopyUrl" + cell.VisibleIndex;
                    button.ToolTip = "Copy Dashboard Url";
                    button.Text = "Copy";
                    button.Styles.Style.BackColor = Color.Transparent;
                    button.Styles.Style.ForeColor = Color.Black;
                    var domainName = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority);
                    var id = DataBinder.Eval(cell.DataItem, "Id");
                    var token = DataBinder.Eval(cell.DataItem, "Token");
                    var fullUrl = domainName + "/DashboardApi?Id=" + id + "&token=" + token;
                    button.ClientSideEvents.Click = string.Format("function(s,e) {{ Click('{0}'); }}", fullUrl);
                }).Render();

            });
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "DashboardId";
            column.Caption = "Dashboard";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Visible = true;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = new DashboardLogic().GetAll();
            comboBoxProperties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
            comboBoxProperties.TextField = "Name";
            comboBoxProperties.ValueField = "Id";
            comboBoxProperties.ValueType = typeof(int);
            column.EditFormSettings.CaptionLocation = ASPxColumnCaptionLocation.Top;
        });


        settings.Columns.Add(column =>
        {
            column.FieldName = "Token";
            column.Caption = "Token";
            column.ColumnType = MVCxGridViewColumnType.Memo;
            column.Visible = true;
            column.Width = Unit.Pixel(300);
            // column.Settings.AllowEllipsisInText =  DefaultBoolean.True;
            column.EditFormSettings.CaptionLocation = ASPxColumnCaptionLocation.Top;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });


        settings.Columns.Add(column =>
        {
            column.FieldName = "MaximumViewTimes";
            column.Caption = "Max Views";
            column.EditFormSettings.Caption = "Max View Times (Leave it blank for No Max view times)";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.Visible = true;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.EditFormSettings.CaptionLocation = ASPxColumnCaptionLocation.Top;
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "CurrentViewTimes";
            column.Caption = "Views";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.EditFormSettings.Visible = DefaultBoolean.False;
            column.Visible = true;
            column.EditFormSettings.CaptionLocation = ASPxColumnCaptionLocation.Top;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "IP";
            column.Caption = "IP";
            column.ColumnType = MVCxGridViewColumnType.Memo;
            column.Visible = true;
            column.MaxWidth = 400;
            //   column.Settings.AllowEllipsisInText = DefaultBoolean.True;
            column.EditFormSettings.Caption = "IP Address (Leave it Blank To Allow All IP's)";
            column.EditFormSettings.CaptionLocation = ASPxColumnCaptionLocation.Top;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.Columns.Add(column =>
        {
            column.Caption = "Locked";
            column.SetDataItemTemplateContent(c =>
            {

                var isLocked = (bool)DataBinder.Eval(c.DataItem, "IsLocked");

                Html.DevExpress().Image(reptImage =>
                {
                    reptImage.Name = "image_dashapi_" + DataBinder.Eval(c.DataItem, "Id");
                    reptImage.ImageUrl = isLocked ? "~/Content/Images/Grid/Lock.png" : "~/Content/Images/Grid/open_lock.png";
                }).GetHtml();

            });
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.False;
            column.CellStyle.Wrap = DefaultBoolean.False;
            column.SetColVisibleIndex(100);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ExpireDateTime";
            column.HeaderStyle.ForeColor = Color.Black;
            column.Caption = "Expire On";
            column.Visible = true;
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            column.CellStyle.Wrap = DefaultBoolean.False;

            column.EditFormSettings.Caption = "Expire (Leave it for No Expire Date)";
            column.EditFormSettings.CaptionLocation = ASPxColumnCaptionLocation.Top;
            column.PropertiesEdit.DisplayFormatString = "dd MMM yyyy";
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "ImpersonateUserId";
            column.Caption = "Impersonate";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Visible = true;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.EditFormSettings.Visible = DefaultBoolean.True;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = new UserLogic().GetAll();
            comboBoxProperties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
            comboBoxProperties.TextField = "UserCaption";
            comboBoxProperties.ValueField = "Id";
            comboBoxProperties.ValueType = typeof(int);

        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "CreatedByUserId";
            column.Caption = "Created By";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            column.Visible = true;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.EditFormSettings.Visible = DefaultBoolean.False;
            var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
            comboBoxProperties.DataSource = new UserLogic().GetAll();
            comboBoxProperties.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
            comboBoxProperties.TextField = "UserCaption";
            comboBoxProperties.ValueField = "Id";
            comboBoxProperties.ValueType = typeof(int);

            column.SetColVisibleIndex(99);
        });

        settings.Columns.Add(column =>
        {
            column.FieldName = "CreatedByDateTime";
            column.HeaderStyle.ForeColor = Color.Black;
            column.Caption = "Created";
            column.Visible = true;
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            column.Settings.AllowAutoFilterTextInputTimer = DefaultBoolean.False;
            column.EditFormSettings.Visible = DefaultBoolean.False;

            column.CellStyle.Wrap = DefaultBoolean.False;
            column.SetColVisibleIndex(99);
            column.PropertiesEdit.DisplayFormatString = "dd MMM yyyy";
        });







        settings.CustomColumnDisplayText = (sender, e) =>
        {
            if (e.Column.FieldName == "Token")
            {
                var gr = sender as ASPxGridView;
                var token = gr.GetRowValues(e.VisibleIndex, "Token");
                if (token != null && token.ToString().Length >= 35)
                {
                    e.DisplayText = token.ToString().Substring(0, 35) + "...";
                }

            }
            else if (e.Column.FieldName == "IP")
            {
                var gr = sender as ASPxGridView;
                var token = gr.GetRowValues(e.VisibleIndex, "IP");
                if (token != null && token.ToString().Length >= 35)
                {
                    e.DisplayText = token.ToString().Substring(0, 35)+"...";
                }

            }
        };


        settings.InitNewRow = (s, e) =>
        {
            //e.NewValues["IsActive"] = true;

        };

        if (ViewData["GridException"] != null)
        {
            settings.SetFooterRowTemplateContent(c =>
            {
                Html.ViewContext.Writer.Write(ViewData["GridException"]);
            });
        }

        settings.BeforeGetCallbackResult = (s, e) =>
        {
            MVCxGridView gridView = (MVCxGridView)s;

            if (ViewData["GridException"] != null)
            {

                gridView.Settings.ShowFooter = true;

            }

            if (!gridView.IsNewRowEditing)
            {

                gridView.DataColumns["DashboardId"].EditFormSettings.Visible = DefaultBoolean.False;

            }

        };

        settings.PreRender = (sender, e) =>
        {
            if (ViewData["GridException"] != null)
            {
                MVCxGridView gridView = (MVCxGridView)sender;
                gridView.Settings.ShowFooter = true;
            }

        };

        ReportSettings.GridViewFeaturesHelper.GenericSettings(settings);

    });


    if (ViewData["GridException"] != null)
    {
        grid.SetEditErrorText((string)ViewData["GridException"]);
    }
    }
    @grid.Bind(Model).GetHtml()